{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "aa740aa9",
   "metadata": {
    "colab_type": "text",
    "id": "view-in-github"
   },
   "source": [
    "<a href=\"https://colab.research.google.com/github/lmendezayl/uba-ldd-tp1/blob/main/TP_1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f162ac8-7675-4e21-8ad1-22ad24708467",
   "metadata": {
    "id": "5f162ac8-7675-4e21-8ad1-22ad24708467"
   },
   "source": [
    "# Trabajo Práctico 1 - Laboratorio de Datos - 1C 2025"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "986b9ffd-7146-4fc6-91f7-cb67d8c1268f",
   "metadata": {
    "id": "986b9ffd-7146-4fc6-91f7-cb67d8c1268f"
   },
   "source": [
    "**Integrantes del grupo:**\n",
    "Walter Franzphierre Yance Velarde"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "6c86fc5e-5f3d-42f2-b6a2-e20353cb903f",
   "metadata": {
    "id": "6c86fc5e-5f3d-42f2-b6a2-e20353cb903f"
   },
   "outputs": [],
   "source": [
    "# Si requieren mas librerias, pueden importarlas aca\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import geopandas as gpd\n",
    "import seaborn as sns\n",
    "import seaborn.objects as so\n",
    "import json\n",
    "import plotly.express as px\n",
    "from formulaic import Formula\n",
    "from sklearn import linear_model\n",
    "from sklearn.metrics import mean_squared_error, r2_score, root_mean_squared_error\n",
    "\n",
    "# Si no existe root_mean_squared_error, quitarlo o actualizar scikit-learn con el comando\n",
    "#!pip install scikit-learn --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "2721820a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/walter/proyectos/jupyter_env'"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8hsH0TyyT_AS",
   "metadata": {
    "id": "8hsH0TyyT_AS"
   },
   "source": [
    "Trabajaremos con el dataset `indicadores-proceso-trayectoria-sobreedad-2012_2022.csv1` que\n",
    "contiene mediciones de variables educativas de la escuela primaria y secundaria en la Provincia de Buenos Aires (PBA) desde 2012 a 2022. En este [link](https://abc.gob.ar/secretarias/sites/default/files/2021-08/MANUAL%20METODOLÓGICO%20DE%20INDICADORES%20EDUCATIVOS-%202021.pdf) pueden consultar la descripción de cada variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "57a5e3f7-d24a-4aac-a682-74d27f6898f7",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 256
    },
    "id": "57a5e3f7-d24a-4aac-a682-74d27f6898f7",
    "outputId": "cbcad614-6c1d-4434-963e-210e6ae911eb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>anio</th>\n",
       "      <th>municipio_id</th>\n",
       "      <th>municipio_nombre</th>\n",
       "      <th>promocion_efectiva_primaria</th>\n",
       "      <th>promocion_efectiva_secundaria</th>\n",
       "      <th>repitencia_primaria</th>\n",
       "      <th>repitencia_secundaria</th>\n",
       "      <th>reinscripcion_primaria</th>\n",
       "      <th>reinscripcion_secundaria</th>\n",
       "      <th>abandono_interanual_primaria</th>\n",
       "      <th>...</th>\n",
       "      <th>alumnos_no_promovidos_primaria</th>\n",
       "      <th>alumnos_no_promovidos_secundaria</th>\n",
       "      <th>salidos_sin_pase_primaria</th>\n",
       "      <th>salidos_sin_pase_secundaria</th>\n",
       "      <th>salidos_con_pase_primaria</th>\n",
       "      <th>salidos_con_pase_secundaria</th>\n",
       "      <th>sobreedad_primaria</th>\n",
       "      <th>sobreedad_secundaria</th>\n",
       "      <th>sobreedad_avanzada_primaria</th>\n",
       "      <th>sobreedad_avanzada_secundaria</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012</td>\n",
       "      <td>6007</td>\n",
       "      <td>Adolfo Alsina</td>\n",
       "      <td>100.26</td>\n",
       "      <td>84.14</td>\n",
       "      <td>1.25</td>\n",
       "      <td>9.06</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.79</td>\n",
       "      <td>-1.57</td>\n",
       "      <td>...</td>\n",
       "      <td>1.45</td>\n",
       "      <td>18.54</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.71</td>\n",
       "      <td>5.40</td>\n",
       "      <td>2.90</td>\n",
       "      <td>12.61</td>\n",
       "      <td>26.77</td>\n",
       "      <td>4.01</td>\n",
       "      <td>12.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013</td>\n",
       "      <td>6007</td>\n",
       "      <td>Adolfo Alsina</td>\n",
       "      <td>97.35</td>\n",
       "      <td>86.84</td>\n",
       "      <td>1.68</td>\n",
       "      <td>5.31</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.84</td>\n",
       "      <td>...</td>\n",
       "      <td>0.70</td>\n",
       "      <td>9.48</td>\n",
       "      <td>0.30</td>\n",
       "      <td>2.77</td>\n",
       "      <td>5.02</td>\n",
       "      <td>5.72</td>\n",
       "      <td>10.27</td>\n",
       "      <td>26.27</td>\n",
       "      <td>3.42</td>\n",
       "      <td>11.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014</td>\n",
       "      <td>6007</td>\n",
       "      <td>Adolfo Alsina</td>\n",
       "      <td>97.36</td>\n",
       "      <td>80.79</td>\n",
       "      <td>2.23</td>\n",
       "      <td>2.52</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.34</td>\n",
       "      <td>...</td>\n",
       "      <td>0.69</td>\n",
       "      <td>9.13</td>\n",
       "      <td>0.13</td>\n",
       "      <td>2.11</td>\n",
       "      <td>4.84</td>\n",
       "      <td>4.31</td>\n",
       "      <td>8.46</td>\n",
       "      <td>25.06</td>\n",
       "      <td>2.51</td>\n",
       "      <td>9.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>6007</td>\n",
       "      <td>Adolfo Alsina</td>\n",
       "      <td>96.00</td>\n",
       "      <td>91.55</td>\n",
       "      <td>2.41</td>\n",
       "      <td>5.24</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.85</td>\n",
       "      <td>1.38</td>\n",
       "      <td>...</td>\n",
       "      <td>1.47</td>\n",
       "      <td>8.62</td>\n",
       "      <td>0.33</td>\n",
       "      <td>2.49</td>\n",
       "      <td>4.96</td>\n",
       "      <td>4.64</td>\n",
       "      <td>7.16</td>\n",
       "      <td>30.85</td>\n",
       "      <td>1.86</td>\n",
       "      <td>10.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016</td>\n",
       "      <td>6007</td>\n",
       "      <td>Adolfo Alsina</td>\n",
       "      <td>97.67</td>\n",
       "      <td>95.56</td>\n",
       "      <td>2.61</td>\n",
       "      <td>7.27</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.29</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>...</td>\n",
       "      <td>1.58</td>\n",
       "      <td>6.95</td>\n",
       "      <td>0.14</td>\n",
       "      <td>2.79</td>\n",
       "      <td>4.72</td>\n",
       "      <td>3.57</td>\n",
       "      <td>6.81</td>\n",
       "      <td>26.13</td>\n",
       "      <td>1.69</td>\n",
       "      <td>8.24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   anio  municipio_id municipio_nombre  promocion_efectiva_primaria  \\\n",
       "0  2012          6007    Adolfo Alsina                       100.26   \n",
       "1  2013          6007    Adolfo Alsina                        97.35   \n",
       "2  2014          6007    Adolfo Alsina                        97.36   \n",
       "3  2015          6007    Adolfo Alsina                        96.00   \n",
       "4  2016          6007    Adolfo Alsina                        97.67   \n",
       "\n",
       "   promocion_efectiva_secundaria  repitencia_primaria  repitencia_secundaria  \\\n",
       "0                          84.14                 1.25                   9.06   \n",
       "1                          86.84                 1.68                   5.31   \n",
       "2                          80.79                 2.23                   2.52   \n",
       "3                          91.55                 2.41                   5.24   \n",
       "4                          95.56                 2.61                   7.27   \n",
       "\n",
       "   reinscripcion_primaria  reinscripcion_secundaria  \\\n",
       "0                    0.07                      1.79   \n",
       "1                    0.13                      0.12   \n",
       "2                    0.07                      0.43   \n",
       "3                    0.21                      0.85   \n",
       "4                    0.07                      1.29   \n",
       "\n",
       "   abandono_interanual_primaria  ...  alumnos_no_promovidos_primaria  \\\n",
       "0                         -1.57  ...                            1.45   \n",
       "1                          0.84  ...                            0.70   \n",
       "2                          0.34  ...                            0.69   \n",
       "3                          1.38  ...                            1.47   \n",
       "4                         -0.35  ...                            1.58   \n",
       "\n",
       "   alumnos_no_promovidos_secundaria  salidos_sin_pase_primaria  \\\n",
       "0                             18.54                       0.00   \n",
       "1                              9.48                       0.30   \n",
       "2                              9.13                       0.13   \n",
       "3                              8.62                       0.33   \n",
       "4                              6.95                       0.14   \n",
       "\n",
       "   salidos_sin_pase_secundaria  salidos_con_pase_primaria  \\\n",
       "0                         2.71                       5.40   \n",
       "1                         2.77                       5.02   \n",
       "2                         2.11                       4.84   \n",
       "3                         2.49                       4.96   \n",
       "4                         2.79                       4.72   \n",
       "\n",
       "   salidos_con_pase_secundaria  sobreedad_primaria  sobreedad_secundaria  \\\n",
       "0                         2.90               12.61                 26.77   \n",
       "1                         5.72               10.27                 26.27   \n",
       "2                         4.31                8.46                 25.06   \n",
       "3                         4.64                7.16                 30.85   \n",
       "4                         3.57                6.81                 26.13   \n",
       "\n",
       "   sobreedad_avanzada_primaria  sobreedad_avanzada_secundaria  \n",
       "0                         4.01                          12.28  \n",
       "1                         3.42                          11.51  \n",
       "2                         2.51                           9.17  \n",
       "3                         1.86                          10.51  \n",
       "4                         1.69                           8.24  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_educacion = pd.read_csv('indicadores-proceso-trayectoria-sobreedad-2012_2022.csv')\n",
    "df_educacion.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5a6c683-6fd5-4556-b3f0-ded5227d7a72",
   "metadata": {
    "id": "f5a6c683-6fd5-4556-b3f0-ded5227d7a72"
   },
   "source": [
    "### Visualización con datos geográficos\n",
    "El objetivo de esta parte del TP es visualizar datos sobre un mapa de Buenos Aires. Para esto, utilizaremos las librerías `geopandas`, que nos permite trabajar con un .geojson como si fuera un DataFrame de `pandas`, y `plotly` para generar mapas interactivos"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48474f28",
   "metadata": {
    "id": "48474f28"
   },
   "source": [
    "#### Ejercicio 1\n",
    "Cargar los datos de `partidos.geojson` utilizando `geopandas`:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "4a4c200f",
   "metadata": {
    "id": "4a4c200f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cca</th>\n",
       "      <th>cde</th>\n",
       "      <th>fna</th>\n",
       "      <th>gna</th>\n",
       "      <th>nam</th>\n",
       "      <th>sag</th>\n",
       "      <th>ara3</th>\n",
       "      <th>arl</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>045</td>\n",
       "      <td>06357</td>\n",
       "      <td>Partido de General Pueyrredón</td>\n",
       "      <td>Partido</td>\n",
       "      <td>General Pueyrredón</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1463.50</td>\n",
       "      <td>1460.74</td>\n",
       "      <td>MULTIPOLYGON (((-57.54 -38.06, -57.53 -38.05, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>055</td>\n",
       "      <td>06441</td>\n",
       "      <td>Partido de La Plata</td>\n",
       "      <td>Partido</td>\n",
       "      <td>La Plata</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>892.63</td>\n",
       "      <td>942.23</td>\n",
       "      <td>MULTIPOLYGON (((-58.14 -34.99, -58.13 -35, -58...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>070</td>\n",
       "      <td>06427</td>\n",
       "      <td>Partido de La Matanza</td>\n",
       "      <td>Partido</td>\n",
       "      <td>La Matanza</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>328.19</td>\n",
       "      <td>329.22</td>\n",
       "      <td>MULTIPOLYGON (((-58.58 -34.65, -58.58 -34.65, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>030</td>\n",
       "      <td>06260</td>\n",
       "      <td>Partido de Esteban Echeverría</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Esteban Echeverría</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>120.45</td>\n",
       "      <td>120.22</td>\n",
       "      <td>MULTIPOLYGON (((-58.51 -34.73, -58.51 -34.73, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>074</td>\n",
       "      <td>06560</td>\n",
       "      <td>Partido de Moreno</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Moreno</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>186.05</td>\n",
       "      <td>186.13</td>\n",
       "      <td>MULTIPOLYGON (((-58.78 -34.56, -58.77 -34.56, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>132</td>\n",
       "      <td>06412</td>\n",
       "      <td>Partido de José C. Paz</td>\n",
       "      <td>Partido</td>\n",
       "      <td>José C. Paz</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>50.01</td>\n",
       "      <td>50.16</td>\n",
       "      <td>MULTIPOLYGON (((-58.81 -34.48, -58.81 -34.48, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>314</td>\n",
       "      <td>06126</td>\n",
       "      <td>Partido de Islas Campana</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas Campana</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>682.96</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-58.9 -33.96, -58.9 -33.96, -5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>113</td>\n",
       "      <td>06182</td>\n",
       "      <td>Partido de Coronel Rosales</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Coronel Rosales</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1283.36</td>\n",
       "      <td>1622.60</td>\n",
       "      <td>MULTIPOLYGON (((-61.74 -38.63, -61.74 -38.63, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>357</td>\n",
       "      <td>06805</td>\n",
       "      <td>Partido de Islas Tigre</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas Tigre</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>280.36</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-58.65 -34.27, -58.64 -34.27, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>398</td>\n",
       "      <td>06763</td>\n",
       "      <td>Partido de Islas de San Nicolas</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas de San Nicolas</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>16.47</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-60.26 -33.27, -60.25 -33.27, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>143 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     cca    cde                              fna      gna  \\\n",
       "0    045  06357    Partido de General Pueyrredón  Partido   \n",
       "1    055  06441              Partido de La Plata  Partido   \n",
       "2    070  06427            Partido de La Matanza  Partido   \n",
       "3    030  06260    Partido de Esteban Echeverría  Partido   \n",
       "4    074  06560                Partido de Moreno  Partido   \n",
       "..   ...    ...                              ...      ...   \n",
       "138  132  06412           Partido de José C. Paz  Partido   \n",
       "139  314  06126         Partido de Islas Campana  Partido   \n",
       "140  113  06182       Partido de Coronel Rosales  Partido   \n",
       "141  357  06805           Partido de Islas Tigre  Partido   \n",
       "142  398  06763  Partido de Islas de San Nicolas  Partido   \n",
       "\n",
       "                      nam   sag     ara3      arl  \\\n",
       "0      General Pueyrredón  ARBA  1463.50  1460.74   \n",
       "1                La Plata  ARBA   892.63   942.23   \n",
       "2              La Matanza  ARBA   328.19   329.22   \n",
       "3      Esteban Echeverría  ARBA   120.45   120.22   \n",
       "4                  Moreno  ARBA   186.05   186.13   \n",
       "..                    ...   ...      ...      ...   \n",
       "138           José C. Paz  ARBA    50.01    50.16   \n",
       "139         Islas Campana  ARBA   682.96      NaN   \n",
       "140       Coronel Rosales  ARBA  1283.36  1622.60   \n",
       "141           Islas Tigre  ARBA   280.36      NaN   \n",
       "142  Islas de San Nicolas  ARBA    16.47      NaN   \n",
       "\n",
       "                                              geometry  \n",
       "0    MULTIPOLYGON (((-57.54 -38.06, -57.53 -38.05, ...  \n",
       "1    MULTIPOLYGON (((-58.14 -34.99, -58.13 -35, -58...  \n",
       "2    MULTIPOLYGON (((-58.58 -34.65, -58.58 -34.65, ...  \n",
       "3    MULTIPOLYGON (((-58.51 -34.73, -58.51 -34.73, ...  \n",
       "4    MULTIPOLYGON (((-58.78 -34.56, -58.77 -34.56, ...  \n",
       "..                                                 ...  \n",
       "138  MULTIPOLYGON (((-58.81 -34.48, -58.81 -34.48, ...  \n",
       "139  MULTIPOLYGON (((-58.9 -33.96, -58.9 -33.96, -5...  \n",
       "140  MULTIPOLYGON (((-61.74 -38.63, -61.74 -38.63, ...  \n",
       "141  MULTIPOLYGON (((-58.65 -34.27, -58.64 -34.27, ...  \n",
       "142  MULTIPOLYGON (((-60.26 -33.27, -60.25 -33.27, ...  \n",
       "\n",
       "[143 rows x 9 columns]"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cargamos el archivo json cpn los datos\n",
    "df_geo = gpd.read_file('partidos.geojson')\n",
    "df_geo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43180c16",
   "metadata": {
    "id": "43180c16"
   },
   "source": [
    "\n",
    "Si imprimimos `geo_df` observamos que cada fila corresponde a un municipio con distintas\n",
    "características y, además, hay una columna `geometry` que tiene las coordenadas de los límites de los partidos. Pueden visualizar estos datos con `geo_df.plot()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "75c2f6d5",
   "metadata": {
    "id": "75c2f6d5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizamos los datos como Partidos\n",
    "df_geo.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7rDp4dOxLkHv",
   "metadata": {
    "id": "7rDp4dOxLkHv"
   },
   "source": [
    "#### Ejercicio 2\n",
    "Identificar qué columna se corresponde al número de identificación de cada municipio. Mostrar\n",
    "todos los municipios con números de identificación repetidos.\n",
    "**Sugerencia**: utilizar el argumento `keep` del método `duplicated`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57ff4612-27bc-4dcc-89c8-1ada7a61ccc1",
   "metadata": {},
   "source": [
    "Hacemos uso del metodo `.nunique()` a la Serie `df_geo['nam']`  (diremos que nam correspondiente a la columna de los municipios, aunque tambien podria haber sido la columna `fna` pues sus valores unicamnete se diferencian porque estas comienzan con \"Partido de\") obteniendo 143, esto coincide con el numero de filas del DataFrame df_geo. Por esa razón para ubicar cual es la columna con los numeros de identificacion con valores repetidos, a esa dicha Serie `\"df_geo['__']\"` al aplicar `.nunique()` debo obtener un valor `menor a 143`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b61718da-d830-443e-88d5-be517fca9a3d",
   "metadata": {},
   "source": [
    "Observamos que la columna buscada no puede ser gna ni sag porque son columnas con valor unico para las 143 filas. Tampoco la columnasarl porque aunque `df_geo['arl'].nunique() resulte 135`, tengo que al obtener otro DataFrame con los valores repetidos con `geo_df[geo_df['arl'].duplicated()]` , son todos de valor nulo (NaN) que no es un identificador (y aunque lo fuera tiene asignados municipios todos diferentes que comienzan en `Islas` (dato que lo veremos en adelante). Por ultimo la columna `ara3` no puede ser tampoco pues ademas que contiene tambien valores float como con arl (no son valores usual que funcionen como identificar),`df_geo['ara3'].nunique() resulta 143` y por lo tanto no hay repeticiones.Por otro lado la columna geometry es muy evidente que no lo sera.\n",
    "\n",
    "`Finalmente` comparamos resultados de aplicar metodo .nunique() para las seies correspondientes a columnas `cca` y `cde` pues sus valores son de tipo string pues comienzan en 0 (forma habitual de asignar un identificador). Asi df_geo['cca'].nunique() resulto en 143 mientras que `df_geo['cde'].nunique() en 134` y por lo tanto es la columna que buscabamos pues encontramos que tiene valores repetidos de los numeros de identificación.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "03421a5b-658b-46e9-89fd-8d91476d7447",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "143"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_geo['cca'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "2496a58b-a3d3-46d0-94ea-5b1a763bb8da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "134"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_geo['cde'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a7b9759-7ab9-4977-a2d1-75faa7516744",
   "metadata": {},
   "source": [
    "Siguiendo la sugerencia uso el metodo `.duplicated(keep=\"first\") y .duplicated(keep='last')` y me doy cuenta que solo hubo una repeticion para cada valor repetido de la columna cde y eso porque los municipios que comienzan con la palabra Islas son las mismas que las que no. Para ver esto genero un nuevo DataFrame `df_municipiosRepetidos` con los valores de cde repetidos mediante metodo .concat() y para visualizar aquel df, los ordeno gracias al metodo `.sort_values()`. Además podemos apreciar que en la Serie `df_municipiosRepetidos.set_index(\"cde\")['nam']` podemos ver que ademas de la diferencia de la palabra Islas que era evidente a simple vista, tambien tenemos que los municipios de Chascomus y Lezama presentan los mismos identificador `06217`, asunto que pareceria un error en el Dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "fa6e9e7b-d976-462d-b534-f2b8657d724e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cca</th>\n",
       "      <th>cde</th>\n",
       "      <th>fna</th>\n",
       "      <th>gna</th>\n",
       "      <th>nam</th>\n",
       "      <th>sag</th>\n",
       "      <th>ara3</th>\n",
       "      <th>arl</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>309</td>\n",
       "      <td>06070</td>\n",
       "      <td>Partido de Islas Baradero</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas Baradero</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>365.56</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-59.48 -33.66, -59.48 -33.67, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>009</td>\n",
       "      <td>06070</td>\n",
       "      <td>Partido de Baradero</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Baradero</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1142.10</td>\n",
       "      <td>1591.87</td>\n",
       "      <td>MULTIPOLYGON (((-59.56 -33.77, -59.56 -33.77, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>314</td>\n",
       "      <td>06126</td>\n",
       "      <td>Partido de Islas Campana</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas Campana</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>682.96</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-58.9 -33.96, -58.9 -33.96, -5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>014</td>\n",
       "      <td>06126</td>\n",
       "      <td>Partido de Campana</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Campana</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>302.83</td>\n",
       "      <td>954.54</td>\n",
       "      <td>MULTIPOLYGON (((-59.1 -34.2, -59.09 -34.19, -5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>387</td>\n",
       "      <td>06665</td>\n",
       "      <td>Partido de Islas Ramallo</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas Ramallo</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>89.97</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-59.82 -33.58, -59.82 -33.58, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>087</td>\n",
       "      <td>06665</td>\n",
       "      <td>Partido de Ramallo</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Ramallo</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>981.08</td>\n",
       "      <td>951.51</td>\n",
       "      <td>MULTIPOLYGON (((-60.2 -33.54, -60.2 -33.54, -6...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>396</td>\n",
       "      <td>06749</td>\n",
       "      <td>Partido de Islas San Fernando</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas San Fernando</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1033.72</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-58.45 -34, -58.43 -34, -58.4 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>096</td>\n",
       "      <td>06749</td>\n",
       "      <td>Partido de San Fernando</td>\n",
       "      <td>Partido</td>\n",
       "      <td>San Fernando</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>24.05</td>\n",
       "      <td>877.08</td>\n",
       "      <td>MULTIPOLYGON (((-58.56 -34.42, -58.56 -34.42, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>398</td>\n",
       "      <td>06763</td>\n",
       "      <td>Partido de Islas de San Nicolas</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas de San Nicolas</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>16.47</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-60.26 -33.27, -60.25 -33.27, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>098</td>\n",
       "      <td>06763</td>\n",
       "      <td>Partido de San Nicolás</td>\n",
       "      <td>Partido</td>\n",
       "      <td>San Nicolás</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>656.15</td>\n",
       "      <td>652.26</td>\n",
       "      <td>MULTIPOLYGON (((-60.27 -33.26, -60.27 -33.26, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>399</td>\n",
       "      <td>06770</td>\n",
       "      <td>Partido de Islas San Pedro</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas San Pedro</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>147.16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-59.8 -33.6, -59.8 -33.6, -59....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>099</td>\n",
       "      <td>06770</td>\n",
       "      <td>Partido de San Pedro</td>\n",
       "      <td>Partido</td>\n",
       "      <td>San Pedro</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1219.27</td>\n",
       "      <td>1319.30</td>\n",
       "      <td>MULTIPOLYGON (((-59.83 -33.58, -59.83 -33.58, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>357</td>\n",
       "      <td>06805</td>\n",
       "      <td>Partido de Islas Tigre</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas Tigre</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>280.36</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-58.65 -34.27, -58.64 -34.27, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>057</td>\n",
       "      <td>06805</td>\n",
       "      <td>Partido de Tigre</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Tigre</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>152.29</td>\n",
       "      <td>304.35</td>\n",
       "      <td>MULTIPOLYGON (((-58.66 -34.37, -58.66 -34.37, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>338</td>\n",
       "      <td>06882</td>\n",
       "      <td>Partido de Islas de Zárate</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Islas de Zárate</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>611.60</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MULTIPOLYGON (((-58.97 -33.96, -58.97 -33.96, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>038</td>\n",
       "      <td>06882</td>\n",
       "      <td>Partido de Zárate</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Zárate</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>573.81</td>\n",
       "      <td>1188.85</td>\n",
       "      <td>MULTIPOLYGON (((-59.01 -34.09, -59.01 -34.09, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cca    cde                              fna      gna  \\\n",
       "126  309  06070        Partido de Islas Baradero  Partido   \n",
       "65   009  06070              Partido de Baradero  Partido   \n",
       "139  314  06126         Partido de Islas Campana  Partido   \n",
       "38   014  06126               Partido de Campana  Partido   \n",
       "130  387  06665         Partido de Islas Ramallo  Partido   \n",
       "28   087  06665               Partido de Ramallo  Partido   \n",
       "128  396  06749    Partido de Islas San Fernando  Partido   \n",
       "103  096  06749          Partido de San Fernando  Partido   \n",
       "142  398  06763  Partido de Islas de San Nicolas  Partido   \n",
       "29   098  06763           Partido de San Nicolás  Partido   \n",
       "131  399  06770       Partido de Islas San Pedro  Partido   \n",
       "104  099  06770             Partido de San Pedro  Partido   \n",
       "141  357  06805           Partido de Islas Tigre  Partido   \n",
       "58   057  06805                 Partido de Tigre  Partido   \n",
       "127  338  06882       Partido de Islas de Zárate  Partido   \n",
       "35   038  06882                Partido de Zárate  Partido   \n",
       "\n",
       "                      nam   sag     ara3      arl  \\\n",
       "126        Islas Baradero  ARBA   365.56      NaN   \n",
       "65               Baradero  ARBA  1142.10  1591.87   \n",
       "139         Islas Campana  ARBA   682.96      NaN   \n",
       "38                Campana  ARBA   302.83   954.54   \n",
       "130         Islas Ramallo  ARBA    89.97      NaN   \n",
       "28                Ramallo  ARBA   981.08   951.51   \n",
       "128    Islas San Fernando  ARBA  1033.72      NaN   \n",
       "103          San Fernando  ARBA    24.05   877.08   \n",
       "142  Islas de San Nicolas  ARBA    16.47      NaN   \n",
       "29            San Nicolás  ARBA   656.15   652.26   \n",
       "131       Islas San Pedro  ARBA   147.16      NaN   \n",
       "104             San Pedro  ARBA  1219.27  1319.30   \n",
       "141           Islas Tigre  ARBA   280.36      NaN   \n",
       "58                  Tigre  ARBA   152.29   304.35   \n",
       "127       Islas de Zárate  ARBA   611.60      NaN   \n",
       "35                 Zárate  ARBA   573.81  1188.85   \n",
       "\n",
       "                                              geometry  \n",
       "126  MULTIPOLYGON (((-59.48 -33.66, -59.48 -33.67, ...  \n",
       "65   MULTIPOLYGON (((-59.56 -33.77, -59.56 -33.77, ...  \n",
       "139  MULTIPOLYGON (((-58.9 -33.96, -58.9 -33.96, -5...  \n",
       "38   MULTIPOLYGON (((-59.1 -34.2, -59.09 -34.19, -5...  \n",
       "130  MULTIPOLYGON (((-59.82 -33.58, -59.82 -33.58, ...  \n",
       "28   MULTIPOLYGON (((-60.2 -33.54, -60.2 -33.54, -6...  \n",
       "128  MULTIPOLYGON (((-58.45 -34, -58.43 -34, -58.4 ...  \n",
       "103  MULTIPOLYGON (((-58.56 -34.42, -58.56 -34.42, ...  \n",
       "142  MULTIPOLYGON (((-60.26 -33.27, -60.25 -33.27, ...  \n",
       "29   MULTIPOLYGON (((-60.27 -33.26, -60.27 -33.26, ...  \n",
       "131  MULTIPOLYGON (((-59.8 -33.6, -59.8 -33.6, -59....  \n",
       "104  MULTIPOLYGON (((-59.83 -33.58, -59.83 -33.58, ...  \n",
       "141  MULTIPOLYGON (((-58.65 -34.27, -58.64 -34.27, ...  \n",
       "58   MULTIPOLYGON (((-58.66 -34.37, -58.66 -34.37, ...  \n",
       "127  MULTIPOLYGON (((-58.97 -33.96, -58.97 -33.96, ...  \n",
       "35   MULTIPOLYGON (((-59.01 -34.09, -59.01 -34.09, ...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "cde\n",
       "06070          Islas Baradero\n",
       "06070                Baradero\n",
       "06126           Islas Campana\n",
       "06126                 Campana\n",
       "06665           Islas Ramallo\n",
       "06665                 Ramallo\n",
       "06749      Islas San Fernando\n",
       "06749            San Fernando\n",
       "06763    Islas de San Nicolas\n",
       "06763             San Nicolás\n",
       "06770         Islas San Pedro\n",
       "06770               San Pedro\n",
       "06805             Islas Tigre\n",
       "06805                   Tigre\n",
       "06882         Islas de Zárate\n",
       "06882                  Zárate\n",
       "Name: nam, dtype: object"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf1= geo_df[geo_df['cde'].duplicated(keep='first')]\n",
    "gdf2= geo_df[geo_df['cde'].duplicated(keep='last')]\n",
    "df_municipiosRepetidos = pd.concat([gdf1, gdf2], axis=0).sort_values(\"cde\")\n",
    "display(df_municipiosRepetidos)\n",
    "df_municipiosRepetidos.set_index(\"cde\")['nam']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de025320",
   "metadata": {
    "id": "de025320"
   },
   "source": [
    "#### Ejercicio 3\n",
    "Aplicar las siguientes modificaciones a `geo_df`:\n",
    "1. eliminar las filas que correspondan a islas de partidos (por ejemplo, Islas Ramallo).\n",
    "2. convertir la columna `cde` a numérica (recordar el método `astype`)\n",
    "3. corregir los valores en la columna cde para los partidos de Chascomús y Lezama, para\n",
    "que coincidan con sus valores en la columna `municipio_id` de `df_educacion`. **Sugerencia**: puede basarse en el siguiente código para corregir los valores:\n",
    "\n",
    "`geo_df.loc[geo_df[???] == ???, <columna a modificar>] = ???`\n",
    "\n",
    "Finalmente, exportar `geo_df` como un GeoJSON llamado `partidos_limpio.geojson`:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33258f8e-59f6-4c36-83e9-58330a096eb4",
   "metadata": {},
   "source": [
    "3.1- Para eliminar filas debo reescribir el DataFrame `df_geo` y hago uso del metodo `.apply()` a la columna `'nam'` para con una con una funcion `lambda` obtener las que no comienzan con Islas `not(n.startswith(\"Islas\"))` , asi obtengo una Serie que boleanos que `sin_Islas` que enlazare a dataflame original para asi quitarme a los que comiencen con `Islas` quedandome asi con 135 filas que son las que casi tienen identificadores no repetidos por no ser por el caso del municipio de `Chascomus y Lezama`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "ade9750a-23ba-44b7-a66f-0fbacc5ad7d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       True\n",
       "1       True\n",
       "2       True\n",
       "3       True\n",
       "4       True\n",
       "       ...  \n",
       "138     True\n",
       "139    False\n",
       "140     True\n",
       "141    False\n",
       "142    False\n",
       "Name: nam, Length: 143, dtype: bool"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sin_Islas= df_geo['nam'].apply(lambda n: not(n.startswith(\"Islas\")))\n",
    "sin_Islas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "2425ac92-63d3-4982-94ab-47801836f71e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cca</th>\n",
       "      <th>cde</th>\n",
       "      <th>fna</th>\n",
       "      <th>gna</th>\n",
       "      <th>nam</th>\n",
       "      <th>sag</th>\n",
       "      <th>ara3</th>\n",
       "      <th>arl</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>045</td>\n",
       "      <td>06357</td>\n",
       "      <td>Partido de General Pueyrredón</td>\n",
       "      <td>Partido</td>\n",
       "      <td>General Pueyrredón</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1463.50</td>\n",
       "      <td>1460.74</td>\n",
       "      <td>MULTIPOLYGON (((-57.54 -38.06, -57.53 -38.05, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>055</td>\n",
       "      <td>06441</td>\n",
       "      <td>Partido de La Plata</td>\n",
       "      <td>Partido</td>\n",
       "      <td>La Plata</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>892.63</td>\n",
       "      <td>942.23</td>\n",
       "      <td>MULTIPOLYGON (((-58.14 -34.99, -58.13 -35, -58...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>070</td>\n",
       "      <td>06427</td>\n",
       "      <td>Partido de La Matanza</td>\n",
       "      <td>Partido</td>\n",
       "      <td>La Matanza</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>328.19</td>\n",
       "      <td>329.22</td>\n",
       "      <td>MULTIPOLYGON (((-58.58 -34.65, -58.58 -34.65, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>030</td>\n",
       "      <td>06260</td>\n",
       "      <td>Partido de Esteban Echeverría</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Esteban Echeverría</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>120.45</td>\n",
       "      <td>120.22</td>\n",
       "      <td>MULTIPOLYGON (((-58.51 -34.73, -58.51 -34.73, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>074</td>\n",
       "      <td>06560</td>\n",
       "      <td>Partido de Moreno</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Moreno</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>186.05</td>\n",
       "      <td>186.13</td>\n",
       "      <td>MULTIPOLYGON (((-58.78 -34.56, -58.77 -34.56, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>137</td>\n",
       "      <td>06217</td>\n",
       "      <td>Partido de Lezama</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Lezama</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1044.82</td>\n",
       "      <td>1035.39</td>\n",
       "      <td>MULTIPOLYGON (((-57.86 -35.69, -57.86 -35.69, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>127</td>\n",
       "      <td>06847</td>\n",
       "      <td>Partido de Tres Lomas</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Tres Lomas</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1255.10</td>\n",
       "      <td>1262.45</td>\n",
       "      <td>MULTIPOLYGON (((-62.94 -36.25, -62.94 -36.25, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>108</td>\n",
       "      <td>06833</td>\n",
       "      <td>Partido de Tres Arroyos</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Tres Arroyos</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>5935.60</td>\n",
       "      <td>5962.88</td>\n",
       "      <td>MULTIPOLYGON (((-60.68 -38.09, -60.67 -38.1, -...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>132</td>\n",
       "      <td>06412</td>\n",
       "      <td>Partido de José C. Paz</td>\n",
       "      <td>Partido</td>\n",
       "      <td>José C. Paz</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>50.01</td>\n",
       "      <td>50.16</td>\n",
       "      <td>MULTIPOLYGON (((-58.81 -34.48, -58.81 -34.48, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>113</td>\n",
       "      <td>06182</td>\n",
       "      <td>Partido de Coronel Rosales</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Coronel Rosales</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1283.36</td>\n",
       "      <td>1622.60</td>\n",
       "      <td>MULTIPOLYGON (((-61.74 -38.63, -61.74 -38.63, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>135 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     cca    cde                            fna      gna                 nam  \\\n",
       "0    045  06357  Partido de General Pueyrredón  Partido  General Pueyrredón   \n",
       "1    055  06441            Partido de La Plata  Partido            La Plata   \n",
       "2    070  06427          Partido de La Matanza  Partido          La Matanza   \n",
       "3    030  06260  Partido de Esteban Echeverría  Partido  Esteban Echeverría   \n",
       "4    074  06560              Partido de Moreno  Partido              Moreno   \n",
       "..   ...    ...                            ...      ...                 ...   \n",
       "135  137  06217              Partido de Lezama  Partido              Lezama   \n",
       "136  127  06847          Partido de Tres Lomas  Partido          Tres Lomas   \n",
       "137  108  06833        Partido de Tres Arroyos  Partido        Tres Arroyos   \n",
       "138  132  06412         Partido de José C. Paz  Partido         José C. Paz   \n",
       "140  113  06182     Partido de Coronel Rosales  Partido     Coronel Rosales   \n",
       "\n",
       "      sag     ara3      arl                                           geometry  \n",
       "0    ARBA  1463.50  1460.74  MULTIPOLYGON (((-57.54 -38.06, -57.53 -38.05, ...  \n",
       "1    ARBA   892.63   942.23  MULTIPOLYGON (((-58.14 -34.99, -58.13 -35, -58...  \n",
       "2    ARBA   328.19   329.22  MULTIPOLYGON (((-58.58 -34.65, -58.58 -34.65, ...  \n",
       "3    ARBA   120.45   120.22  MULTIPOLYGON (((-58.51 -34.73, -58.51 -34.73, ...  \n",
       "4    ARBA   186.05   186.13  MULTIPOLYGON (((-58.78 -34.56, -58.77 -34.56, ...  \n",
       "..    ...      ...      ...                                                ...  \n",
       "135  ARBA  1044.82  1035.39  MULTIPOLYGON (((-57.86 -35.69, -57.86 -35.69, ...  \n",
       "136  ARBA  1255.10  1262.45  MULTIPOLYGON (((-62.94 -36.25, -62.94 -36.25, ...  \n",
       "137  ARBA  5935.60  5962.88  MULTIPOLYGON (((-60.68 -38.09, -60.67 -38.1, -...  \n",
       "138  ARBA    50.01    50.16  MULTIPOLYGON (((-58.81 -34.48, -58.81 -34.48, ...  \n",
       "140  ARBA  1283.36  1622.60  MULTIPOLYGON (((-61.74 -38.63, -61.74 -38.63, ...  \n",
       "\n",
       "[135 rows x 9 columns]"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_geo = df_geo[sin_Islas]\n",
    "df_geo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f0916d6-7301-4726-a840-ad7d02b7cc96",
   "metadata": {},
   "source": [
    "3.2- Para convertir la columna cde a numérica nuevamente debo sobreescribir el Dataframe `df_geo`, para ello modificaremos la columna `cde` pues con ayuda del metodo `.astype()` convertimos los valores de la columna cde a int mediante `df_geo['cde'].astype(int)`. Asi, luego, rescribimos la Serie `df_geo['cde']` con la modificada que llamamos `cde_str_a_int` mediante el metodo `.loc[:,'___']`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "d4eb051a-7588-45e7-87e9-d83a513b2099",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cca</th>\n",
       "      <th>cde</th>\n",
       "      <th>fna</th>\n",
       "      <th>gna</th>\n",
       "      <th>nam</th>\n",
       "      <th>sag</th>\n",
       "      <th>ara3</th>\n",
       "      <th>arl</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>045</td>\n",
       "      <td>6357</td>\n",
       "      <td>Partido de General Pueyrredón</td>\n",
       "      <td>Partido</td>\n",
       "      <td>General Pueyrredón</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1463.50</td>\n",
       "      <td>1460.74</td>\n",
       "      <td>MULTIPOLYGON (((-57.54 -38.06, -57.53 -38.05, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>055</td>\n",
       "      <td>6441</td>\n",
       "      <td>Partido de La Plata</td>\n",
       "      <td>Partido</td>\n",
       "      <td>La Plata</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>892.63</td>\n",
       "      <td>942.23</td>\n",
       "      <td>MULTIPOLYGON (((-58.14 -34.99, -58.13 -35, -58...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>070</td>\n",
       "      <td>6427</td>\n",
       "      <td>Partido de La Matanza</td>\n",
       "      <td>Partido</td>\n",
       "      <td>La Matanza</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>328.19</td>\n",
       "      <td>329.22</td>\n",
       "      <td>MULTIPOLYGON (((-58.58 -34.65, -58.58 -34.65, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>030</td>\n",
       "      <td>6260</td>\n",
       "      <td>Partido de Esteban Echeverría</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Esteban Echeverría</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>120.45</td>\n",
       "      <td>120.22</td>\n",
       "      <td>MULTIPOLYGON (((-58.51 -34.73, -58.51 -34.73, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>074</td>\n",
       "      <td>6560</td>\n",
       "      <td>Partido de Moreno</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Moreno</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>186.05</td>\n",
       "      <td>186.13</td>\n",
       "      <td>MULTIPOLYGON (((-58.78 -34.56, -58.77 -34.56, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>137</td>\n",
       "      <td>6217</td>\n",
       "      <td>Partido de Lezama</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Lezama</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1044.82</td>\n",
       "      <td>1035.39</td>\n",
       "      <td>MULTIPOLYGON (((-57.86 -35.69, -57.86 -35.69, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>127</td>\n",
       "      <td>6847</td>\n",
       "      <td>Partido de Tres Lomas</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Tres Lomas</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1255.10</td>\n",
       "      <td>1262.45</td>\n",
       "      <td>MULTIPOLYGON (((-62.94 -36.25, -62.94 -36.25, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>108</td>\n",
       "      <td>6833</td>\n",
       "      <td>Partido de Tres Arroyos</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Tres Arroyos</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>5935.60</td>\n",
       "      <td>5962.88</td>\n",
       "      <td>MULTIPOLYGON (((-60.68 -38.09, -60.67 -38.1, -...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>132</td>\n",
       "      <td>6412</td>\n",
       "      <td>Partido de José C. Paz</td>\n",
       "      <td>Partido</td>\n",
       "      <td>José C. Paz</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>50.01</td>\n",
       "      <td>50.16</td>\n",
       "      <td>MULTIPOLYGON (((-58.81 -34.48, -58.81 -34.48, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>113</td>\n",
       "      <td>6182</td>\n",
       "      <td>Partido de Coronel Rosales</td>\n",
       "      <td>Partido</td>\n",
       "      <td>Coronel Rosales</td>\n",
       "      <td>ARBA</td>\n",
       "      <td>1283.36</td>\n",
       "      <td>1622.60</td>\n",
       "      <td>MULTIPOLYGON (((-61.74 -38.63, -61.74 -38.63, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>135 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     cca   cde                            fna      gna                 nam  \\\n",
       "0    045  6357  Partido de General Pueyrredón  Partido  General Pueyrredón   \n",
       "1    055  6441            Partido de La Plata  Partido            La Plata   \n",
       "2    070  6427          Partido de La Matanza  Partido          La Matanza   \n",
       "3    030  6260  Partido de Esteban Echeverría  Partido  Esteban Echeverría   \n",
       "4    074  6560              Partido de Moreno  Partido              Moreno   \n",
       "..   ...   ...                            ...      ...                 ...   \n",
       "135  137  6217              Partido de Lezama  Partido              Lezama   \n",
       "136  127  6847          Partido de Tres Lomas  Partido          Tres Lomas   \n",
       "137  108  6833        Partido de Tres Arroyos  Partido        Tres Arroyos   \n",
       "138  132  6412         Partido de José C. Paz  Partido         José C. Paz   \n",
       "140  113  6182     Partido de Coronel Rosales  Partido     Coronel Rosales   \n",
       "\n",
       "      sag     ara3      arl                                           geometry  \n",
       "0    ARBA  1463.50  1460.74  MULTIPOLYGON (((-57.54 -38.06, -57.53 -38.05, ...  \n",
       "1    ARBA   892.63   942.23  MULTIPOLYGON (((-58.14 -34.99, -58.13 -35, -58...  \n",
       "2    ARBA   328.19   329.22  MULTIPOLYGON (((-58.58 -34.65, -58.58 -34.65, ...  \n",
       "3    ARBA   120.45   120.22  MULTIPOLYGON (((-58.51 -34.73, -58.51 -34.73, ...  \n",
       "4    ARBA   186.05   186.13  MULTIPOLYGON (((-58.78 -34.56, -58.77 -34.56, ...  \n",
       "..    ...      ...      ...                                                ...  \n",
       "135  ARBA  1044.82  1035.39  MULTIPOLYGON (((-57.86 -35.69, -57.86 -35.69, ...  \n",
       "136  ARBA  1255.10  1262.45  MULTIPOLYGON (((-62.94 -36.25, -62.94 -36.25, ...  \n",
       "137  ARBA  5935.60  5962.88  MULTIPOLYGON (((-60.68 -38.09, -60.67 -38.1, -...  \n",
       "138  ARBA    50.01    50.16  MULTIPOLYGON (((-58.81 -34.48, -58.81 -34.48, ...  \n",
       "140  ARBA  1283.36  1622.60  MULTIPOLYGON (((-61.74 -38.63, -61.74 -38.63, ...  \n",
       "\n",
       "[135 rows x 9 columns]"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cde_str_a_int = df_geo['cde'].astype(int)\n",
    "df_geo.loc[:,'cde'] = cde_str_a_int\n",
    "df_geo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae2ef7d3-08ba-4dda-9799-7bf51502f157",
   "metadata": {},
   "source": [
    "3.3- para ello hacemos uso de la sugerencia. Antes averiguamos cual es el valor municipio_id para el municipio de Lezama como para el de Chascomus. Pare ello ubico el valor unico de `municipio_id` son metodo `.unique()` en el DataFrame `df_educacion` que filtre por el nombre del municipio Lezama y Chascomus obteniendo que dichos identificadores son `6466` (ubicado por pirmera vez en indice 770 de dicho df) y `6218`(ubicado por pirmera vez en indice 253, esto me servira cuando deba hacer uso del metodo `.loc[])`) respectivamente. Podria reemplazar estos valores directamente por los valores cde en el Dataframe df_geo pero usaremos la `sugerencia`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "e4141283-3fe8-455c-9da6-b731a3b56be6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(6466)"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_educacion[df_educacion['municipio_nombre'] == 'Lezama']['municipio_id'].unique()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "6139d8ef-7c62-4c4c-a705-e5a1e9ba8651",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(6466)"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_educacion[df_educacion['municipio_nombre'] == 'Lezama']['municipio_id'].loc[770]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "87175ba7-c7ad-4928-98c8-61ed3bf05b80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(6218)"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_educacion[df_educacion['municipio_nombre'] == 'Chascomus']['municipio_id'].unique()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "1353ac02-60b4-47e9-9ba1-cbfff3e5d1db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(6218)"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_educacion[df_educacion['municipio_nombre'] == 'Chascomus']['municipio_id'].loc[253]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b77af5d5-11ab-4bf5-be67-8723aaca4a56",
   "metadata": {},
   "source": [
    "siguiendo la sugerencia:\n",
    "`geo_df.loc[geo_df[???] == ???, <columna a modificar>] = ???`\n",
    "podria usar para el reemplazo el metodo `.loc[]` o el `.unique()[0]`  porque obtengo los mismos valores como se aprecia arriba."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "c3e058f6-e35d-4c60-a2f9-6e5ddd4a789f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_geo.loc[df_geo[\"nam\"] == 'Chascomus', \"cde\"] = df_educacion[df_educacion['municipio_nombre'] == 'Chascomus']['municipio_id'].loc[253]\n",
    "df_geo.loc[df_geo[\"nam\"] == 'Lezama', \"cde\"] = df_educacion[df_educacion['municipio_nombre'] == 'Lezama']['municipio_id'].loc[770]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "0eb87e04-385a-46d4-a99c-157ba3e7c598",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cca</th>\n",
       "      <th>cde</th>\n",
       "      <th>fna</th>\n",
       "      <th>gna</th>\n",
       "      <th>nam</th>\n",
       "      <th>sag</th>\n",
       "      <th>ara3</th>\n",
       "      <th>arl</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty GeoDataFrame\n",
       "Columns: [cca, cde, fna, gna, nam, sag, ara3, arl, geometry]\n",
       "Index: []"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_geo[df_geo[\"nam\"] == 'Chascomus']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c059325-b73b-44ec-a157-8e45770a60d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grabamos los datos limpios en un nuevo archivo GeoJSON\n",
    "geo_df.to_file('partidos_limpio.geojson', driver='GeoJSON')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f81c7add",
   "metadata": {
    "id": "f81c7add"
   },
   "source": [
    "#### Ejercicio 4\n",
    "A partir del DataFrame `df_educacion`, crear un DataFrame `repit` que tenga tres colum-\n",
    "nas: `cde` con el código del municipio, `municipio_nombre` con el nombre del municipio y\n",
    "`repitencia_secundaria` con el promedio de repitencia en secundaria del municipio.\n",
    "\n",
    "**Sugerencia**: Partir de `df_educacion.groupby(['municipio_id', 'municipio_nombre'])`.\n",
    "Si obtienen una serie con multi-indices, pueden convertirlo a DataFrame con columnas para los índices utilizando `.reset_index()`. O si ingresan el nombre de la columna `repitencia_secundaria` entre doble corchetes, obtienen también un DataFrame con las tres columnas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3ae70c0",
   "metadata": {
    "id": "a3ae70c0"
   },
   "outputs": [],
   "source": [
    "# Creamos un DataFrame repit con los datos de repitencia siguiendo la consigna del TP\n",
    "\n",
    "#repit = pd.concat([df_educacion.groupby(['municipio_id', 'municipio_nombre'])])\n",
    "\n",
    "\n",
    "# para matchear tengo que \n",
    "# cde con el codigo de las columnas\n",
    "df_educacion.groupby(['municipio_id', 'municipio_nombre'])['repitencia_secundaria'].mean()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26791890",
   "metadata": {
    "id": "26791890"
   },
   "source": [
    "#### Ejercicio 5\n",
    "Con el siguiente código podemos elaborar un mapa interactivo:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3de7b74b",
   "metadata": {
    "id": "3de7b74b"
   },
   "outputs": [],
   "source": [
    "with open('partidos_limpio.geojson', 'r') as f:\n",
    "    partidos = json.load(f)\n",
    "\n",
    "fig = px.choropleth_map(\n",
    "    repit,\n",
    "    geojson=partidos,\n",
    "    featureidkey = 'properties.cde',\n",
    "    locations='cde',\n",
    "    color='repitencia_secundaria',\n",
    "    zoom = 4,\n",
    "    center = {\"lat\": -34.61315, \"lon\": -58.37723},\n",
    ")\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48479f49",
   "metadata": {
    "id": "48479f49"
   },
   "source": [
    "Agregar argumentos a `choropleth_map` para que:\n",
    "1. la escala de color sea 'Bluered' (pueden ver otras escalas de color en este link)\n",
    "2. la opacidad del color sea de 0.7\n",
    "3. que al pasar el cursor sobre un partido, se muestre también su nombre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc519b5e-5a00-4435-ba04-89b79cd9af16",
   "metadata": {
    "id": "cc519b5e-5a00-4435-ba04-89b79cd9af16"
   },
   "outputs": [],
   "source": [
    "# Generamos un gráfico interactivo para el nivel de repitencia\n",
    "\n",
    "# Si no existe chorpleth_map o alguna opcion del codigo en la siguiente celda, actualizar plotly con el siguiente comando y reiniciar el kernel.\n",
    "#!pip install plotly --upgrade\n",
    "\n",
    "# Si tienen algún error de Java después de instalar los paquetes actualizados y reiniciar el kernel, prueben refrescar el navegador con CTRL+F5."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00c228ce-bfb2-4002-9280-204ba22fbd5e",
   "metadata": {
    "id": "00c228ce-bfb2-4002-9280-204ba22fbd5e"
   },
   "source": [
    "### Análisis exploratorio"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "836d47b2",
   "metadata": {
    "id": "836d47b2"
   },
   "source": [
    "La idea de este ítem es que realicen un análisis exploratorio de los datos, aplicando las herramientas de visualización (seaborn.objects, seaborn y/o matplotlib), de resumen de datos (media, mediana, desvío estándar, operaciones sobre el DataFrame, etc.) y/o de Regresión.\n",
    "El objetivo es entender, comparar y/o estudiar aspectos en los indicadores educativos de los partidos de la Provincia de Buenos Aires. Algunas preguntas disparadoras pueden ser:\n",
    "- ¿Existe alguna relación entre la repitencia y los fondos enviados al partido para la educación?\n",
    "- ¿Podemos explicar por qué hay algunos partidos con repitencia muy superior al promedio?\n",
    "- ¿Qué relación hay entre la cantidad de habitantes y la cantidad de establecimientos educativos?\n",
    "-\n",
    "No es necesario que respondan a cada una de esas preguntas (ni se limiten a eso), lo mejor es que exploren por donde se les ocurra. Alentamos que se planteen hipótesis y usen los datos para corroborarlas o rechazarlas. Pueden aplicar cualquiera de las herramientas que hemos visto hasta ahora. Asimismo, pueden centrarse en un conjunto de partidos, en un conjunto de indicadores educativos, etc.\n",
    "\n",
    "A continuación dejamos otros datasets que pueden serles de ayuda (su uso es opcional):\n",
    "- [Establecimientos educativos](https://catalogo.datos.gba.gob.ar/dataset/establecimientos-educativos)\n",
    "- [Población](https://catalogo.datos.gba.gob.ar/dataset/poblacion)\n",
    "- [Transferencias a Consejos Escolares](https://catalogo.datos.gba.gob.ar/dataset/tranferencias-consejos-escolares)\n",
    "- [Transferencias a municipios](https://catalogo.datos.gba.gob.ar/dataset/transferencias-municipios)\n",
    "\n",
    "También pueden explorar datasets del Gobierno Nacional o de la Ciudad de Buenos Aires (pero\n",
    "que el análisis esté centrado en PBA).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edf85d8d",
   "metadata": {
    "id": "edf85d8d"
   },
   "source": [
    "**Importante**: en el Notebook, las visualizaciones y resúmenes de datos que realicen deben\n",
    "estar acompañados por las conclusiones que obtengan a partir de ellos."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "include_colab_link": true,
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
